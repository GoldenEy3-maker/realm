/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RootRouteImport } from './routes/_root/route'
import { Route as RootIndexImport } from './routes/_root/index'
import { Route as RootTasksIndexImport } from './routes/_root/tasks/index'
import { Route as RootTasksTaskSlugIndexImport } from './routes/_root/tasks/$taskSlug/index'
import { Route as RootTasksTaskSlugTestTestIdImport } from './routes/_root/tasks/$taskSlug/test.$testId'

// Create/Update Routes

const RootRouteRoute = RootRouteImport.update({
  id: '/_root',
  getParentRoute: () => rootRoute,
} as any)

const RootIndexRoute = RootIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RootRouteRoute,
} as any)

const RootTasksIndexRoute = RootTasksIndexImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => RootRouteRoute,
} as any)

const RootTasksTaskSlugIndexRoute = RootTasksTaskSlugIndexImport.update({
  id: '/tasks/$taskSlug/',
  path: '/tasks/$taskSlug/',
  getParentRoute: () => RootRouteRoute,
} as any)

const RootTasksTaskSlugTestTestIdRoute =
  RootTasksTaskSlugTestTestIdImport.update({
    id: '/tasks/$taskSlug/test/$testId',
    path: '/tasks/$taskSlug/test/$testId',
    getParentRoute: () => RootRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_root': {
      id: '/_root'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof RootRouteImport
      parentRoute: typeof rootRoute
    }
    '/_root/': {
      id: '/_root/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof RootIndexImport
      parentRoute: typeof RootRouteImport
    }
    '/_root/tasks/': {
      id: '/_root/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof RootTasksIndexImport
      parentRoute: typeof RootRouteImport
    }
    '/_root/tasks/$taskSlug/': {
      id: '/_root/tasks/$taskSlug/'
      path: '/tasks/$taskSlug'
      fullPath: '/tasks/$taskSlug'
      preLoaderRoute: typeof RootTasksTaskSlugIndexImport
      parentRoute: typeof RootRouteImport
    }
    '/_root/tasks/$taskSlug/test/$testId': {
      id: '/_root/tasks/$taskSlug/test/$testId'
      path: '/tasks/$taskSlug/test/$testId'
      fullPath: '/tasks/$taskSlug/test/$testId'
      preLoaderRoute: typeof RootTasksTaskSlugTestTestIdImport
      parentRoute: typeof RootRouteImport
    }
  }
}

// Create and export the route tree

interface RootRouteRouteChildren {
  RootIndexRoute: typeof RootIndexRoute
  RootTasksIndexRoute: typeof RootTasksIndexRoute
  RootTasksTaskSlugIndexRoute: typeof RootTasksTaskSlugIndexRoute
  RootTasksTaskSlugTestTestIdRoute: typeof RootTasksTaskSlugTestTestIdRoute
}

const RootRouteRouteChildren: RootRouteRouteChildren = {
  RootIndexRoute: RootIndexRoute,
  RootTasksIndexRoute: RootTasksIndexRoute,
  RootTasksTaskSlugIndexRoute: RootTasksTaskSlugIndexRoute,
  RootTasksTaskSlugTestTestIdRoute: RootTasksTaskSlugTestTestIdRoute,
}

const RootRouteRouteWithChildren = RootRouteRoute._addFileChildren(
  RootRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof RootRouteRouteWithChildren
  '/': typeof RootIndexRoute
  '/tasks': typeof RootTasksIndexRoute
  '/tasks/$taskSlug': typeof RootTasksTaskSlugIndexRoute
  '/tasks/$taskSlug/test/$testId': typeof RootTasksTaskSlugTestTestIdRoute
}

export interface FileRoutesByTo {
  '/': typeof RootIndexRoute
  '/tasks': typeof RootTasksIndexRoute
  '/tasks/$taskSlug': typeof RootTasksTaskSlugIndexRoute
  '/tasks/$taskSlug/test/$testId': typeof RootTasksTaskSlugTestTestIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_root': typeof RootRouteRouteWithChildren
  '/_root/': typeof RootIndexRoute
  '/_root/tasks/': typeof RootTasksIndexRoute
  '/_root/tasks/$taskSlug/': typeof RootTasksTaskSlugIndexRoute
  '/_root/tasks/$taskSlug/test/$testId': typeof RootTasksTaskSlugTestTestIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/'
    | '/tasks'
    | '/tasks/$taskSlug'
    | '/tasks/$taskSlug/test/$testId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/tasks' | '/tasks/$taskSlug' | '/tasks/$taskSlug/test/$testId'
  id:
    | '__root__'
    | '/_root'
    | '/_root/'
    | '/_root/tasks/'
    | '/_root/tasks/$taskSlug/'
    | '/_root/tasks/$taskSlug/test/$testId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  RootRouteRoute: typeof RootRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  RootRouteRoute: RootRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_root"
      ]
    },
    "/_root": {
      "filePath": "_root/route.tsx",
      "children": [
        "/_root/",
        "/_root/tasks/",
        "/_root/tasks/$taskSlug/",
        "/_root/tasks/$taskSlug/test/$testId"
      ]
    },
    "/_root/": {
      "filePath": "_root/index.tsx",
      "parent": "/_root"
    },
    "/_root/tasks/": {
      "filePath": "_root/tasks/index.tsx",
      "parent": "/_root"
    },
    "/_root/tasks/$taskSlug/": {
      "filePath": "_root/tasks/$taskSlug/index.tsx",
      "parent": "/_root"
    },
    "/_root/tasks/$taskSlug/test/$testId": {
      "filePath": "_root/tasks/$taskSlug/test.$testId.tsx",
      "parent": "/_root"
    }
  }
}
ROUTE_MANIFEST_END */
